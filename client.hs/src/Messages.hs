{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module Messages (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".messages\", haskellPrefix = [], parentModule = [], baseName = MName \"Messages\"}, protoFilePath = [\"Messages.hs\"], protoSource = \"protobuf/messages.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".messages.GetRequest\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"GetRequest\"}, descFilePath = [\"Messages\",\"GetRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.GetRequest.key\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"GetRequest\"], baseName' = FName \"key\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".messages.GetResponse\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"GetResponse\"}, descFilePath = [\"Messages\",\"GetResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.GetResponse.key\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"GetResponse\"], baseName' = FName \"key\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.GetResponse.success\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"GetResponse\"], baseName' = FName \"success\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.GetResponse.value\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"GetResponse\"], baseName' = FName \"value\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".messages.PutRequest\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"PutRequest\"}, descFilePath = [\"Messages\",\"PutRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.PutRequest.key\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"PutRequest\"], baseName' = FName \"key\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.PutRequest.value\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"PutRequest\"], baseName' = FName \"value\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".messages.PutResponse\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"PutResponse\"}, descFilePath = [\"Messages\",\"PutResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.PutResponse.key\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"PutResponse\"], baseName' = FName \"key\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.PutResponse.success\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"PutResponse\"], baseName' = FName \"success\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".messages.RemoveRequest\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"RemoveRequest\"}, descFilePath = [\"Messages\",\"RemoveRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.RemoveRequest.key\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"RemoveRequest\"], baseName' = FName \"key\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".messages.RemoveResponse\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"RemoveResponse\"}, descFilePath = [\"Messages\",\"RemoveResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.RemoveResponse.key\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"RemoveResponse\"], baseName' = FName \"key\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.RemoveResponse.success\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"RemoveResponse\"], baseName' = FName \"success\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 8}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".messages.ClientRequest\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"ClientRequest\"}, descFilePath = [\"Messages\",\"ClientRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.ClientRequest.type\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"ClientRequest\"], baseName' = FName \"type'\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".messages.Type\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"Type\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.ClientRequest.get\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"ClientRequest\"], baseName' = FName \"get\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".messages.GetRequest\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"GetRequest\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.ClientRequest.put\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"ClientRequest\"], baseName' = FName \"put\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".messages.PutRequest\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"PutRequest\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.ClientRequest.remove\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"ClientRequest\"], baseName' = FName \"remove\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".messages.RemoveRequest\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"RemoveRequest\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".messages.ClientResponse\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"ClientResponse\"}, descFilePath = [\"Messages\",\"ClientResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.ClientResponse.type\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"ClientResponse\"], baseName' = FName \"type'\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".messages.Type\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"Type\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.ClientResponse.get\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"ClientResponse\"], baseName' = FName \"get\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".messages.GetResponse\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"GetResponse\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.ClientResponse.put\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"ClientResponse\"], baseName' = FName \"put\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".messages.PutResponse\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"PutResponse\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".messages.ClientResponse.remove\", haskellPrefix' = [], parentModule' = [MName \"Messages\",MName \"ClientResponse\"], baseName' = FName \"remove\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".messages.RemoveResponse\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"RemoveResponse\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".messages.Type\", haskellPrefix = [], parentModule = [MName \"Messages\"], baseName = MName \"Type\"}, enumFilePath = [\"Messages\",\"Type.hs\"], enumValues = [(EnumCode {getEnumCode = 1},\"GET\"),(EnumCode {getEnumCode = 2},\"PUT\"),(EnumCode {getEnumCode = 3},\"REMOVE\")]}], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\135\ENQ\n\ETBprotobuf/messages.proto\DC2\bmessages\"\EM\n\nGetRequest\DC2\v\n\ETXkey\CAN\SOH \STX(\t\":\n\vGetResponse\DC2\v\n\ETXkey\CAN\SOH \STX(\t\DC2\SI\n\asuccess\CAN\STX \STX(\b\DC2\r\n\ENQvalue\CAN\ETX \SOH(\t\"(\n\nPutRequest\DC2\v\n\ETXkey\CAN\SOH \STX(\t\DC2\r\n\ENQvalue\CAN\STX \STX(\t\"+\n\vPutResponse\DC2\v\n\ETXkey\CAN\SOH \STX(\t\DC2\SI\n\asuccess\CAN\STX \STX(\b\"\FS\n\rRemoveRequest\DC2\v\n\ETXkey\CAN\SOH \STX(\t\".\n\SORemoveResponse\DC2\v\n\ETXkey\CAN\SOH \STX(\t\DC2\SI\n\asuccess\CAN\STX \STX(\b\"\156\SOH\n\rClientRequest\DC2\FS\n\EOTtype\CAN\SOH \STX(\SO2\SO.messages.Type\DC2!\n\ETXget\CAN\STX \SOH(\v2\DC4.messages.GetRequest\DC2!\n\ETXput\CAN\ETX \SOH(\v2\DC4.messages.PutRequest\DC2'\n\ACKremove\CAN\EOT \SOH(\v2\ETB.messages.RemoveRequest\"\160\SOH\n\SOClientResponse\DC2\FS\n\EOTtype\CAN\SOH \STX(\SO2\SO.messages.Type\DC2\"\n\ETXget\CAN\STX \SOH(\v2\NAK.messages.GetResponse\DC2\"\n\ETXput\CAN\ETX \SOH(\v2\NAK.messages.PutResponse\DC2(\n\ACKremove\CAN\EOT \SOH(\v2\CAN.messages.RemoveResponse*$\n\EOTType\DC2\a\n\ETXGET\DLE\SOH\DC2\a\n\ETXPUT\DLE\STX\DC2\n\n\ACKREMOVE\DLE\ETX")